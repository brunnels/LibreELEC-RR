From 873cab28828feef7ace9c863996b142589c62c84 Mon Sep 17 00:00:00 2001
From: Flyinghead <raphael.jean@gmail.com>
Date: Sat, 9 Feb 2019 12:56:21 +0100
Subject: [PATCH] Support for real Wiimotes and DolphinBar

---
 CMakeLists.txt                          |  2 +-
 Source/Core/DolphinLibretro/Boot.cpp    |  1 +
 Source/Core/DolphinLibretro/Input.cpp   | 16 ++++++++--------
 Source/Core/DolphinLibretro/Main.cpp    |  8 ++++++++
 Source/Core/DolphinLibretro/Options.cpp |  1 +
 Source/Core/DolphinLibretro/Options.h   |  1 +
 6 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c9678a6eaf1..f03ac63f82d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -697,7 +697,7 @@ else()
   set(ICONV_LIBRARIES iconv)
 endif()
 
-if(NOT ANDROID AND NOT LIBRETRO)
+if(NOT ANDROID)
   find_package(HIDAPI)
   if(NOT HIDAPI_FOUND)
     message(STATUS "Using static HIDAPI from Externals")
diff --git a/Source/Core/DolphinLibretro/Boot.cpp b/Source/Core/DolphinLibretro/Boot.cpp
index 479122bab44..5b8fb524d09 100644
--- a/Source/Core/DolphinLibretro/Boot.cpp
+++ b/Source/Core/DolphinLibretro/Boot.cpp
@@ -114,6 +114,7 @@ bool retro_load_game(const struct retro_game_info* game)
   Config::SetBase(Config::GFX_SHADER_COMPILER_THREADS, 1);
   Config::SetBase(Config::GFX_SHADER_PRECOMPILER_THREADS, 1);
 #endif
+  SConfig::GetInstance().m_WiimoteContinuousScanning = Libretro::Options::bluetoothContinuousScan;
 
   Libretro::Video::Init();
   NOTICE_LOG(VIDEO, "Using GFX backend: %s", SConfig::GetInstance().m_strVideoBackend.c_str());
diff --git a/Source/Core/DolphinLibretro/Input.cpp b/Source/Core/DolphinLibretro/Input.cpp
index 506af7c7108..f652b3c4a33 100644
--- a/Source/Core/DolphinLibretro/Input.cpp
+++ b/Source/Core/DolphinLibretro/Input.cpp
@@ -31,7 +31,7 @@
 #define RETRO_DEVICE_WIIMOTE_SW ((2 << 8) | RETRO_DEVICE_JOYPAD)
 #define RETRO_DEVICE_WIIMOTE_NC ((3 << 8) | RETRO_DEVICE_JOYPAD)
 #define RETRO_DEVICE_WIIMOTE_CC ((4 << 8) | RETRO_DEVICE_JOYPAD)
-#define RETRO_DEVICE_WIIMOTE_CC_PRO ((5 << 8) | RETRO_DEVICE_JOYPAD)
+#define RETRO_DEVICE_REAL_WIIMOTE ((6 << 8) | RETRO_DEVICE_NONE)
 
 namespace Libretro
 {
@@ -394,7 +394,7 @@ void Init()
         {"WiiMote (sideways)", RETRO_DEVICE_WIIMOTE_SW},
         {"WiiMote + Nunchuk", RETRO_DEVICE_WIIMOTE_NC},
         {"WiiMote + Classic Controller", RETRO_DEVICE_WIIMOTE_CC},
-        {"WiiMote + Classic Controller Pro", RETRO_DEVICE_WIIMOTE_CC_PRO},
+        {"Real WiiMote", RETRO_DEVICE_REAL_WIIMOTE},
     };
 
     static const struct retro_controller_info ports[] = {
@@ -476,7 +476,7 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
 #endif
 
   Libretro::Input::RemoveDevicesForPort(port);
-  if (device != RETRO_DEVICE_NONE)
+  if ((device & 0xff) != RETRO_DEVICE_NONE)
     Libretro::Input::AddDevicesForPort(port);
 
   if (!SConfig::GetInstance().bWii)
@@ -525,8 +525,7 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
     gcPad->UpdateReferences(g_controller_interface);
     Pad::GetConfig()->SaveConfig();
   }
-
-  if (SConfig::GetInstance().bWii && !SConfig::GetInstance().m_bt_passthrough_enabled)
+  else if (!SConfig::GetInstance().m_bt_passthrough_enabled && (device & 0xff) != RETRO_DEVICE_NONE)
   {
     WiimoteEmu::Wiimote* wm = (WiimoteEmu::Wiimote*)Wiimote::GetConfig()->GetController(port);
     // load an empty inifile section, clears everything
@@ -535,7 +534,7 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
     wm->SetDefaultDevice(devJoypad);
 
     using namespace WiimoteEmu;
-    if (device == RETRO_DEVICE_WIIMOTE_CC || device == RETRO_DEVICE_WIIMOTE_CC_PRO)
+    if (device == RETRO_DEVICE_WIIMOTE_CC)
     {
       ControllerEmu::ControlGroup* ccButtons = wm->GetClassicGroup(ClassicGroup::Buttons);
       ControllerEmu::ControlGroup* ccTriggers = wm->GetClassicGroup(ClassicGroup::Triggers);
@@ -675,7 +674,6 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
       break;
 
     case RETRO_DEVICE_WIIMOTE_CC:
-    case RETRO_DEVICE_WIIMOTE_CC_PRO:
       wmExtension->switch_extension = EXT_CLASSIC;
       WiimoteReal::ChangeWiimoteSource(port, WIIMOTE_SRC_EMU);
       break;
@@ -688,6 +686,8 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
     wm->UpdateReferences(g_controller_interface);
     ::Wiimote::GetConfig()->SaveConfig();
   }
+  else if (Libretro::Input::input_types[port] == RETRO_DEVICE_REAL_WIIMOTE)
+    WiimoteReal::ChangeWiimoteSource(port, WIIMOTE_SRC_REAL);
 
   std::vector<retro_input_descriptor> all_descs;
 
@@ -710,10 +710,10 @@ void retro_set_controller_port_device(unsigned port, unsigned device)
       break;
 
     case RETRO_DEVICE_WIIMOTE_CC:
-    case RETRO_DEVICE_WIIMOTE_CC_PRO:
       desc = Libretro::Input::descWiimoteCC;
       break;
 
+    case RETRO_DEVICE_REAL_WIIMOTE:
     case RETRO_DEVICE_NONE:
       continue;
 
diff --git a/Source/Core/DolphinLibretro/Main.cpp b/Source/Core/DolphinLibretro/Main.cpp
index dbe34f6586a..c9fb5929f64 100644
--- a/Source/Core/DolphinLibretro/Main.cpp
+++ b/Source/Core/DolphinLibretro/Main.cpp
@@ -18,6 +18,7 @@
 #include "Core/HW/Memmap.h"
 #include "Core/HW/ProcessorInterface.h"
 #include "Core/HW/VideoInterface.h"
+#include "Core/HW/WiimoteReal/WiimoteReal.h"
 #include "Core/State.h"
 #include "DolphinLibretro/Input.h"
 #include "DolphinLibretro/Options.h"
@@ -231,6 +232,13 @@ void retro_run(void)
     Libretro::environ_cb(RETRO_ENVIRONMENT_SET_GEOMETRY, &info);
   }
 
+  if (Libretro::Options::bluetoothContinuousScan.Updated()
+      && Libretro::Options::bluetoothContinuousScan != SConfig::GetInstance().m_WiimoteContinuousScanning)
+  {
+    SConfig::GetInstance().m_WiimoteContinuousScanning = Libretro::Options::bluetoothContinuousScan;
+    WiimoteReal::Initialize(Wiimote::InitializeMode::DO_NOT_WAIT_FOR_WIIMOTES);
+  }
+
   RETRO_PERFORMANCE_INIT(dolphin_main_func);
   RETRO_PERFORMANCE_START(dolphin_main_func);
 
diff --git a/Source/Core/DolphinLibretro/Options.cpp b/Source/Core/DolphinLibretro/Options.cpp
index 46a278327df..eaed19d30c4 100644
--- a/Source/Core/DolphinLibretro/Options.cpp
+++ b/Source/Core/DolphinLibretro/Options.cpp
@@ -202,6 +202,7 @@ Option<bool> progressiveScan("dolphin_progressive_scan", "Progressive Scan", tru
 Option<bool> pal60("dolphin_pal60", "PAL60", true);
 Option<u32> sensorBarPosition("dolphin_sensor_bar_position", "Sensor Bar Position",
                               {"Bottom", "Top"});
+Option<bool> bluetoothContinuousScan("dolphin_bt_continuous_scan", "Bluetooth scan", {"Off", "Continuous"});
 Option<unsigned int> audioMixerRate("dolphin_mixer_rate", "Audio Mixer Rate",
                                     {{"32000", 32000u}, {"48000", 48000u}});
 Option<ShaderCompilationMode> shaderCompilationMode(
diff --git a/Source/Core/DolphinLibretro/Options.h b/Source/Core/DolphinLibretro/Options.h
index a546e35e0fe..f2d2dfaf337 100644
--- a/Source/Core/DolphinLibretro/Options.h
+++ b/Source/Core/DolphinLibretro/Options.h
@@ -82,5 +82,6 @@ extern Option<bool> gpuTextureDecoding;
 extern Option<bool> waitForShaders;
 extern Option<bool> forceTextureFiltering;
 extern Option<bool> loadCustomTextures;
+extern Option<bool> bluetoothContinuousScan;
 }  // namespace Options
 }  // namespace Libretro
