# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2018-present Frank Hartung (supervisedthinking@gmail.com)

# Check common stuff
set_RR_environment() {
  oe_setup_addon service.rr-config-tool

  # Set 2048/MrBoom demos
  LR2048_SCRIPT=/usr/bin/2048.sh
  LR2048_LINK=/storage/roms/2048/2048.sh
  MRBOOM_SCRIPT=/usr/bin/mrboom.sh
  MRBOOM_LINK=/storage/roms/mrboom/MrBoom.sh
  if [ "${RR_EMULATION_DEMOS}" = "true" ]; then
    ln -sf ${LR2048_SCRIPT} ${LR2048_LINK}
    ln -sf ${MRBOOM_SCRIPT} ${MRBOOM_LINK}
  else
    if [ -L ${LR2048_LINK} ]; then
      rm -f ${LR2048_LINK}
    fi
    if [ -L ${MRBOOM_LINK} ]; then
      rm -f ${MRBOOM_LINK}
    fi
  fi

  # Set PrBoom/Doom symlinks
  DOOM_SCRIPT=/storage/roms/prboom/Doom.sh
  DOOM_WAD_PATH="/storage/roms/prboom/"*"oom/doom.wad"
  PRBOOM_WAD_PATH="/storage/roms/prboom/"*"oom/prboom.wad"
  if [ -f ${DOOM_WAD_PATH} ] && [ ${RR_EMULATION_ID_GAMES} = "true" ]; then
    pathname=$(dirname ${DOOM_WAD_PATH})
    pathname=${pathname}
    ln -sf /usr/share/prboom/prboom.wad "${pathname}"/prboom.wad
    ln -sf /usr/bin/doom.sh ${DOOM_SCRIPT}
  else
    if [ -L ${PRBOOM_WAD_PATH} ]; then
      rm ${PRBOOM_WAD_PATH}
    fi
    if [ -L ${DOOM_SCRIPT} ]; then
      rm ${DOOM_SCRIPT}
    fi
  fi

  # Set PrBoom/Doom 2 symlinks
  DOOM2_SCRIPT=/storage/roms/prboom/Doom2.sh
  DOOM2_WAD_PATH="/storage/roms/prboom/"*"oom"*"2/doom2.wad"
  PRBOOM2_WAD_PATH="/storage/roms/prboom/"*"oom"*"2/prboom.wad"
  if [ -f ${DOOM2_WAD_PATH} ] && [ ${RR_EMULATION_ID_GAMES} = "true" ]; then
    pathname=$(dirname ${DOOM2_WAD_PATH})
    pathname=${pathname}
    ln -sf /usr/share/prboom/prboom.wad "${pathname}"/prboom.wad
    ln -sf /usr/bin/doom2.sh ${DOOM2_SCRIPT}
  else
    if [ -L ${PRBOOM2_WAD_PATH} ]; then
      rm ${PRBOOM2_WAD_PATH}
    fi
    if [ -L ${DOOM2_SCRIPT} ]; then
      rm ${DOOM2_SCRIPT}
    fi
  fi

  # Set TyrQuake/Quake symlinks
  QUAKE_SCRIPT="/storage/roms/tyrquake/Quake.sh"
  QUAKE_PAK0_PATH="/storage/roms/tyrquake/id1/pak0.pak"
  QUAKE_PAK1_PATH="/storage/roms/tyrquake/id1/pak1.pak"
  if [ -f "${QUAKE_PAK0_PATH}" ] && [ -f "${QUAKE_PAK1_PATH}" ] && [ ${RR_EMULATION_ID_GAMES} = "true" ]; then
    ln -sf /usr/bin/quake.sh ${QUAKE_SCRIPT}
  else
    if [ -L ${QUAKE_SCRIPT} ]; then
      rm ${QUAKE_SCRIPT}
    fi
  fi

  # RETROARCH: create recording directory
  RETROARCH_RECORDING_PATH=/storage/recordings/retroarch
  if [ ! -d ${RETROARCH_RECORDING_PATH} ]; then
    mkdir -p ${RETROARCH_RECORDING_PATH}
  fi

  # RETROARCH: set cache directory path if available
  RETROARCH_CONFIG=/storage/.config/retroarch/retroarch.cfg
  RETROARCH_TEMP_PATH=/tmp/emulation
  if [ -d ${RETROARCH_TEMP_PATH} ]; then
    if [ ! -d ${RETROARCH_TEMP_PATH}/retroarch ]; then
      mkdir -p ${RETROARCH_TEMP_PATH}/retroarch
    fi
    sed -e "s/cache_directory = \"\"/cache_directory = \"\/tmp\/emulation\/retroarch\"/" -i $RETROARCH_CONFIG
  else
    sed -e "s/cache_directory = \"\/tmp\/emulation\/retroarch\"/cache_directory = \"\"/" -i $RETROARCH_CONFIG
  fi
}

show_RR_announcement() {
  RR_DELAY_ANNOUNCEMENT=5000
  RR_DELAY_SCRIPT=250000

  case ${1} in
    Emulationstation)
      kodi-send --action="Notification(Emulationstation,Now loading the frontend. Please wait.,${RR_DELAY_ANNOUNCEMENT},DefaultAddonGameES.png)" > /dev/null
      usleep ${RR_DELAY_SCRIPT}
    ;;
    Moonlight-Qt)
      kodi-send --action="Notification(Moonlight-Qt,Now loading the streaming client. Please wait.,${RR_DELAY_ANNOUNCEMENT},DefaultAddonGameMQT.png)" > /dev/null
      usleep ${RR_DELAY_SCRIPT}
    ;;
    Pegasus)
      kodi-send --action="Notification(Pegasus,Now loading the frontend. Please wait.,${RR_DELAY_ANNOUNCEMENT},DefaultAddonGamePF.png)" > /dev/null
      usleep $RR_DELAY_SCRIPT
    ;;
    Retroarch)
      kodi-send --action="Notification(Retroarch,Now loading the frontend. Please wait.,${RR_DELAY_ANNOUNCEMENT},DefaultAddonGameRA.png)" > /dev/null
      usleep ${RR_DELAY_SCRIPT}
    ;;
    *)
      echo "Usage: $0 [Emulationstation|Moonlight-Qt|Retroarch|Pegasus-Frontend]"
    ;;
  esac
}
