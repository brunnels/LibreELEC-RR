# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2018-present Frank Hartung (supervisedthinking@gmail.com)

# Set common paths
export PULSE_RUNTIME_PATH=/run/pulse

# If a card is found use PulseAudio sink
pulseaudio_sink_load() {
  oe_setup_addon service.rr-config-tool
  
  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ];then
    if [ "${RR_PA_TSCHED}" = "false" ]; then
      TSCHED="tsched=0"
      echo "rr-config-tool: disabling timer-based audio scheduling for PulseAudio"
    fi

    if [ ! -z "$(pactl list modules short | grep module-null-sink)" ];then
      if [ "${RR_PA_UDEV}" = "true" ]; then
        pactl load-module module-udev-detect $TSCHED > /dev/null
        pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" ${RR_AUDIO_VOLUME}%
        if [ ! -z "$(pactl list modules short | grep module-alsa-card)" ];then
          echo "rr-config-tool: loaded PulseAudio module-udev-detect, setting a volume of "${RR_AUDIO_VOLUME}"%"
        else
          echo "rr-config-tool: failed to load PulseAudio module-udev-detect"
        fi
      else
        pactl load-module module-alsa-sink device="${RR_AUDIO_DEVICE}" name="temp_sink" ${TSCHED} > /dev/null
        pactl set-sink-volume alsa_output.temp_sink ${RR_AUDIO_VOLUME}%
        if [ ! -z "$(pactl list modules short | grep module-alsa-sink)" ];then
          echo "rr-config-tool: loaded PulseAudio module-alsa-sink, setting a volume of "${RR_AUDIO_VOLUME}"%"
        else
          echo "rr-config-tool: failed to load PulseAudio module-alsa-sink"
        fi
      fi
    fi
  fi
}

# Unload PulseAudio sink
pulseaudio_sink_unload() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    if [ "${RR_PA_UDEV}" = "true" ] && [ ! -z "$(pactl list modules short | grep module-alsa-card)" ]; then
      pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" 100%  
      pactl unload-module module-udev-detect
      pactl unload-module module-alsa-card
      echo "rr-config-tool: unloaded PulseAudio module-udev-detect"
    elif [ "${RR_PA_UDEV}" = "false" ] && [ ! -z "$(pactl list modules short | grep module-alsa-sink)" ]; then
      pactl set-sink-volume alsa_output.temp_sink 100%
      NUMBER="$(pactl list modules short | grep "name=temp_sink" | awk '{print $1;}')"
      if [ -n "${NUMBER}" ]; then
        pactl unload-module "${NUMBER}"
      fi
      echo "rr-config-tool: unloaded PulseAudio module-alsa-sink"
    else
      echo "rr-config-tool: Neither PulseAudio module module-alsa-card or module-alsa-sink was found. Nothing to unload"
    fi

    # Restore ALSA Master volume to 100%
    if [ ! $(amixer get Master | awk '$0~/%/{print $4}' | tr -d '[]%') = "100" ]; then
      amixer -q set Master,0 100% unmute
      echo "rr-config-tool: set ALSA mixer volume to 100%"
    fi
  fi
}

# Start FluidSynth
fluidsynth_service_start() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ ! "$(systemctl is-active fluidsynth)" = "active" ]; then
    systemctl start fluidsynth
    if [ "$(systemctl is-active fluidsynth)" = "active" ]; then 
      echo "rr-config-tool: successfully loaded FluidSynth service"
    else
      echo "rr-config-tool: failed to load FluidSynth service"
    fi
  fi
}

# Stop FluidSynth
fluidsynth_service_stop() {
  oe_setup_addon service.rr-config-tool

  if [ "$(systemctl is-active fluidsynth)" = "active" ]; then
    systemctl stop fluidsynth
    if [ ! "$(systemctl is-active fluidsynth)" = "active" ]; then 
      echo "rr-config-tool: successfully stopped FluidSynth service"
    else
      echo "rr-config-tool: failed to stop FluidSynth service"
    fi
  fi
}

# SDL2: Set audio driver to Pulseaudio or ALSA
set_SDL_audiodriver() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    export SDL_AUDIODRIVER=pulseaudio
    echo "rr-config-tool: set SDL_AUDIODRIVER to PulseAudio"
  else
    export SDL_AUDIODRIVER=alsa
    echo "rr-config-tool: set SDL_AUDIODRIVER to ALSA"
  fi
}

# RETROARCH: Set audio & midi driver
set_RA_audiodriver() {
  oe_setup_addon service.rr-config-tool

  RETROARCH_HOME=/storage/.config/retroarch
  RETROARCH_CONFIG=${RETROARCH_HOME}/retroarch.cfg

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    sed -e "s/audio_driver = \"alsathread\"/audio_driver = \"pulse\"/" -i ${RETROARCH_CONFIG}
    sed -e "s/midi_driver = \"null\"/midi_driver = \"alsa\"/" -i          ${RETROARCH_CONFIG}
    sed -e "s/midi_output = \"Off\"/midi_output = \"FluidSynth\"/" -i     ${RETROARCH_CONFIG}
    echo "rr-config-tool: set Retroarch audio driver to PulseAudio"
  else
    sed -e "s/audio_driver = \"pulse\"/audio_driver = \"alsathread\"/" -i ${RETROARCH_CONFIG}
    sed -e "s/midi_driver = \"alsa\"/midi_driver = \"null\"/" -i          ${RETROARCH_CONFIG}
    sed -e "s/midi_output = \"FluidSynth\"/midi_output = \"Off\"/" -i     ${RETROARCH_CONFIG}
    echo "rr-config-tool: set Retroarch audio driver to ALSA"
  fi
}
