# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2018-present Frank Hartung (supervisedthinking@gmail.com)

# Set common paths
export RR_FLUIDSYNTH_RUN=/var/run/fluidsynth.run
export PULSE_RUNTIME_PATH=/run/pulse

# If a card is found use PulseAudio sink
load_pulseaudio_sink() {
  oe_setup_addon service.rr-config-tool
  
  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ];then
    if [ "${RR_PA_TSCHED}" = "false" ]; then
      TSCHED="tsched=0"
    fi

    if [ "${RR_PA_UDEV}" = "true" ]; then
      pactl load-module module-udev-detect $TSCHED > /dev/null
      pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" ${RR_AUDIO_VOLUME}%
    else
      pactl load-module module-alsa-sink device="${RR_AUDIO_DEVICE}" name="temp_sink" ${TSCHED} > /dev/null
      pactl set-sink-volume alsa_output.temp_sink ${RR_AUDIO_VOLUME}%
    fi
  fi
}

# Unload PulseAudio sink
unload_pulseaudio_sink() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ];then
    if [ "${RR_PA_UDEV}" = "true" ]; then
      pactl set-sink-volume "$(pactl info | grep 'Default Sink:' | cut -d ' ' -f 3)" 100%  
      pactl unload-module module-udev-detect
      pactl unload-module module-alsa-card
    else
      pactl set-sink-volume alsa_output.temp_sink 100%
      NUMBER="$(pactl list modules short | grep "name=temp_sink" | awk '{print $1;}')"
      if [ -n "${NUMBER}" ]; then
        pactl unload-module "${NUMBER}"
      fi
    fi

    # Restore ALSA Master volume to 100%
    if [ ! $(amixer get Master | awk '$0~/%/{print $4}' | tr -d '[]%') = "100" ]; then
      amixer -q set Master,0 100% unmute
    fi
  fi
}

# Start FluidSynth
start_FluidSynth_backend() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ ! -f ${RR_FLUIDSYNTH_RUN} ]; then
    systemctl start fluidsynth
    touch ${RR_FLUIDSYNTH_RUN}
  fi
}

# Stop FluidSynth
stop_FluidSynth_backend() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ] && [ -f ${RR_FLUIDSYNTH_RUN} ]; then
    systemctl stop fluidsynth
    rm ${RR_FLUIDSYNTH_RUN}
  fi
}

# SDL2: Set audio driver to Pulseaudio or ALSA
set_SDL_audiodriver() {
  oe_setup_addon service.rr-config-tool

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    export SDL_AUDIODRIVER=pulseaudio
  else
    export SDL_AUDIODRIVER=alsa
  fi
}

# RETROARCH: Set audio & midi driver
set_RA_audiodriver() {
  oe_setup_addon service.rr-config-tool

  RETROARCH_HOME=/storage/.config/retroarch
  RETROARCH_CONFIG=${RETROARCH_HOME}/retroarch.cfg

  if [ ${RR_AUDIO_BACKEND} = "PulseAudio" ]; then
    sed -e "s/audio_driver = \"alsathread\"/audio_driver = \"pulse\"/" -i ${RETROARCH_CONFIG}
    sed -e "s/midi_driver = \"null\"/midi_driver = \"alsa\"/" -i          ${RETROARCH_CONFIG}
    sed -e "s/midi_output = \"Off\"/midi_output = \"FluidSynth\"/" -i     ${RETROARCH_CONFIG}
  else
    sed -e "s/audio_driver = \"pulse\"/audio_driver = \"alsathread\"/" -i ${RETROARCH_CONFIG}
    sed -e "s/midi_driver = \"alsa\"/midi_driver = \"null\"/" -i          ${RETROARCH_CONFIG}
    sed -e "s/midi_output = \"FluidSynth\"/midi_output = \"Off\"/" -i     ${RETROARCH_CONFIG}
  fi
}
